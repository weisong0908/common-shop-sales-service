// <auto-generated />
using System;
using CommonShop.SalesService.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace CommonShop.SalesService.Migrations
{
    [DbContext(typeof(SalesDbContext))]
    [Migration("20210117064629_SeedCustomerAddress")]
    partial class SeedCustomerAddress
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("CommonShop.SalesService.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Line1")
                        .HasColumnType("text");

                    b.Property<string>("Line2")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("108e7c96-ea21-44f2-9cbe-db4237c2d1dd"),
                            CustomerId = new Guid("6865a7fa-6866-4516-9002-53cc8386991e"),
                            Line1 = "Block 0 Street 0",
                            Line2 = "#10-0",
                            PostalCode = "123456"
                        },
                        new
                        {
                            Id = new Guid("41881c20-df28-43df-8e1c-e42748181ea3"),
                            CustomerId = new Guid("f5f1e765-a3bb-44bb-89b9-52ab8eab9db4"),
                            Line1 = "Block 1 Street 2",
                            Line2 = "#9-1",
                            PostalCode = "123456"
                        },
                        new
                        {
                            Id = new Guid("5df7c00b-3cfd-48e7-a674-6aee0f120313"),
                            CustomerId = new Guid("3a538afc-1441-4c96-bf86-81a18ad0ca04"),
                            Line1 = "Block 2 Street 4",
                            Line2 = "#8-4",
                            PostalCode = "123456"
                        },
                        new
                        {
                            Id = new Guid("c9871377-210e-4979-a006-a8e156b05147"),
                            CustomerId = new Guid("97bdd552-ae59-403a-ba6c-3162d17560ec"),
                            Line1 = "Block 3 Street 6",
                            Line2 = "#7-9",
                            PostalCode = "123456"
                        });
                });

            modelBuilder.Entity("CommonShop.SalesService.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6865a7fa-6866-4516-9002-53cc8386991e"),
                            Email = "weisong0908@gmail.com",
                            Name = "John 0",
                            Phone = "98765432"
                        },
                        new
                        {
                            Id = new Guid("f5f1e765-a3bb-44bb-89b9-52ab8eab9db4"),
                            Email = "weisong0908@gmail.com",
                            Name = "John 1",
                            Phone = "98765432"
                        },
                        new
                        {
                            Id = new Guid("3a538afc-1441-4c96-bf86-81a18ad0ca04"),
                            Email = "weisong0908@gmail.com",
                            Name = "John 2",
                            Phone = "98765432"
                        },
                        new
                        {
                            Id = new Guid("97bdd552-ae59-403a-ba6c-3162d17560ec"),
                            Email = "weisong0908@gmail.com",
                            Name = "John 3",
                            Phone = "98765432"
                        });
                });

            modelBuilder.Entity("CommonShop.SalesService.Models.Fee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Fees");
                });

            modelBuilder.Entity("CommonShop.SalesService.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CommonShop.SalesService.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("StockLevel")
                        .HasColumnType("integer");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.Property<Guid>("OrdersId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uuid");

                    b.HasKey("OrdersId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("OrderProduct");
                });

            modelBuilder.Entity("CommonShop.SalesService.Models.Address", b =>
                {
                    b.HasOne("CommonShop.SalesService.Models.Customer", "Customer")
                        .WithOne("PrimaryAddress")
                        .HasForeignKey("CommonShop.SalesService.Models.Address", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CommonShop.SalesService.Models.Fee", b =>
                {
                    b.HasOne("CommonShop.SalesService.Models.Order", "Order")
                        .WithMany("Fees")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CommonShop.SalesService.Models.Order", b =>
                {
                    b.HasOne("CommonShop.SalesService.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.HasOne("CommonShop.SalesService.Models.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommonShop.SalesService.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommonShop.SalesService.Models.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("PrimaryAddress");
                });

            modelBuilder.Entity("CommonShop.SalesService.Models.Order", b =>
                {
                    b.Navigation("Fees");
                });
#pragma warning restore 612, 618
        }
    }
}
